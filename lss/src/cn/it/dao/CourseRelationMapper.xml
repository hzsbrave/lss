<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.it.dao.CourseRelationMapper" >
    <resultMap id="BaseResultMap" type="cn.it.entity.CourseRelation" >
        <id column="tcr_id" property="tcrId" jdbcType="INTEGER" />
        <result column="student_id" property="studentId" jdbcType="INTEGER" />
        <result column="course_detail_id" property="courseDetailId" jdbcType="INTEGER" />
        <result column="create_time" property="createTime" jdbcType="DATE" />
        <result column="last_update_time" property="lastUpdateTime" jdbcType="DATE" />
    </resultMap>
    <resultMap id="StudentBaseResultMap" type="cn.it.entity.Student">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="student_name" property="studentName" jdbcType="VARCHAR" />
		<result column="student_no" property="studentNo" jdbcType="VARCHAR" />
		<result column="gender" property="gender" jdbcType="INTEGER" />
		<result column="natives" property="natives" jdbcType="VARCHAR" />
		<result column="birthday" property="birthday" jdbcType="TIMESTAMP" />
		<result column="address" property="address" jdbcType="VARCHAR" />
		<result column="enter_date" property="enterDate" jdbcType="TIMESTAMP" />
		<result column="phone" property="phone" jdbcType="VARCHAR" />
		<result column="QQ" property="qq" jdbcType="VARCHAR" />
		<result column="email" property="email" jdbcType="VARCHAR" />
		<result column="national" property="national" jdbcType="VARCHAR" />
		<result column="Political" property="political" jdbcType="VARCHAR" />
		<result column="idCard" property="idcard" jdbcType="VARCHAR" />
		<result column="family_phone" property="familyPhone" jdbcType="VARCHAR" />
		<result column="middle_school" property="middleSchool"
			jdbcType="VARCHAR" />
		<result column="grade" property="grade" jdbcType="VARCHAR" />
		<result column="class_id" property="classId" jdbcType="INTEGER" />
		<result column="examinee" property="examinee" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="token" property="token" jdbcType="VARCHAR" />
    </resultMap>
    <resultMap id="CourseBaseResultMap" type="cn.it.entity.Course">
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="course_name" property="courseName" jdbcType="VARCHAR" />
        <result column="need_hours" property="needHours" jdbcType="TINYINT" />
        <result column="major_id" property="majorId" jdbcType="INTEGER" />
        <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    tcr_id, student_id, course_detail_id, create_time, last_update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.it.entity.CourseRelationExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_c_relationship
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_c_relationship
    where tcr_id = #{tcrId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_c_relationship
    where tcr_id = #{tcrId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.it.entity.CourseRelationExample" >
    delete from t_c_relationship
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.it.entity.CourseRelation" >
    insert into t_c_relationship (tcr_id, student_id, course_detail_id, 
      create_time, last_update_time)
    values (#{tcrId,jdbcType=INTEGER}, #{studentId,jdbcType=INTEGER}, #{courseDetailId,jdbcType=INTEGER}, 
      #{createTime,jdbcType=DATE}, #{lastUpdateTime,jdbcType=DATE})
  </insert>
  <insert id="insertSelective" parameterType="cn.it.entity.CourseRelation" >
    insert into t_c_relationship
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="tcrId != null" >
        tcr_id,
      </if>
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="courseDetailId != null" >
        course_detail_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="lastUpdateTime != null" >
        last_update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="tcrId != null" >
        #{tcrId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null" >
        #{studentId,jdbcType=INTEGER},
      </if>
      <if test="courseDetailId != null" >
        #{courseDetailId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=DATE},
      </if>
      <if test="lastUpdateTime != null" >
        #{lastUpdateTime,jdbcType=DATE},
      </if>
    </trim>
  </insert>

  <select id="countByExample" parameterType="cn.it.entity.CourseRelationExample" resultType="java.lang.Integer" >
    select count(*) from t_c_relationship
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  <select id="selectStudentByTeacherId" parameterType="cn.it.entity.model.TeacherPO" resultMap="StudentBaseResultMap">
      SELECT
          ts.id,
          ts.user_id,
          ts.student_name,
          ts.student_no,
          ts.gender,
          ts.natives,
          ts.birthday,
          ts.address,
          ts.enter_date,
          ts.phone,
          ts.QQ,
          ts.email,
          ts.national,
          ts.Political,
          ts.idCard,
          ts.family_phone,
          ts.middle_school,
          ts.grade,
          ts.class_id,
          ts.examinee,
          ts.`password`,
          ts.token
      FROM
      (
      SELECT DISTINCT
        (tcr.student_id) studentId
      FROM
        t_course_detail tcd,
        t_c_relationship tcr
      WHERE
      tcr.course_detail_id = tcd.tcd_id
      <if test="teacherId != null">
          AND tcd.teacher_id = #{teacherId,jdbcType=INTEGER}
      </if>
      <if test="courseId != null">
          AND tcd.course_id = #{courseId,jdbcType=INTEGER}
      </if>
      ) t
      LEFT JOIN t_student ts ON t.studentId = ts.id
  </select>
  
    <select id="selectCourseByTeacherId" parameterType="java.lang.Integer" resultType="cn.it.entity.vo.CourseDetailVO">
        SELECT DISTINCT
            (tc.id) id,
            tc.course_name courseName,
            tc.need_hours needHours,
            tc.major_id majorId,
            tc.create_date createDate,
            tcl.class_name className
        FROM
            t_course_detail tcd,
            t_course tc,
            t_classes_course tcc,
            t_classes tcl
        WHERE
            tcc.course_id = tc.id
        AND tcl.id = tcc.classes_id
        AND	tcd.course_id = tc.id
        AND tcd.teacher_id = #{id,jdbcType=INTEGER}
  </select>
  
  <update id="updateByExampleSelective" parameterType="map" >
    update t_c_relationship
    <set >
      <if test="record.tcrId != null" >
        tcr_id = #{record.tcrId,jdbcType=INTEGER},
      </if>
      <if test="record.studentId != null" >
        student_id = #{record.studentId,jdbcType=INTEGER},
      </if>
      <if test="record.courseDetailId != null" >
        course_detail_id = #{record.courseDetailId,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=DATE},
      </if>
      <if test="record.lastUpdateTime != null" >
        last_update_time = #{record.lastUpdateTime,jdbcType=DATE},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_c_relationship
    set tcr_id = #{record.tcrId,jdbcType=INTEGER},
      student_id = #{record.studentId,jdbcType=INTEGER},
      course_detail_id = #{record.courseDetailId,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=DATE},
      last_update_time = #{record.lastUpdateTime,jdbcType=DATE}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.it.entity.CourseRelation" >
    update t_c_relationship
    <set >
      <if test="studentId != null" >
        student_id = #{studentId,jdbcType=INTEGER},
      </if>
      <if test="courseDetailId != null" >
        course_detail_id = #{courseDetailId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=DATE},
      </if>
      <if test="lastUpdateTime != null" >
        last_update_time = #{lastUpdateTime,jdbcType=DATE},
      </if>
    </set>
    where tcr_id = #{tcrId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.it.entity.CourseRelation" >
    update t_c_relationship
    set student_id = #{studentId,jdbcType=INTEGER},
      course_detail_id = #{courseDetailId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=DATE},
      last_update_time = #{lastUpdateTime,jdbcType=DATE}
    where tcr_id = #{tcrId,jdbcType=INTEGER}
  </update>
  
    <insert id="addCourseRelationList" useGeneratedKeys="true"
		parameterType="java.util.List">
		<selectKey resultType="long" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
		insert into t_c_relationship (
		tcr_id,
		student_id,
		course_detail_id,
		create_time,
		last_update_time
		)
		values
		<foreach collection="list" item="item" index="index"
			separator=",">
			(
			#{item.tcrId,jdbcType=INTEGER},
			#{item.studentId,jdbcType=INTEGER},
			#{item.courseDetailId,jdbcType=INTEGER},
			#{item.createTime,jdbcType=DATE},
			#{item.lastUpdateTime,jdbcType=DATE}
			)
		</foreach>
	</insert>
  
</mapper>