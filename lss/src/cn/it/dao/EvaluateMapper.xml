<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.it.dao.EvaluateMapper" >
  <resultMap id="BaseResultMap" type="cn.it.entity.Evaluate" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="student_id" property="studentId" jdbcType="INTEGER" />
    <result column="evaluate_score" property="evaluateScore" jdbcType="INTEGER" />
    <result column="evaluate_text" property="evaluateText" jdbcType="VARCHAR" />
    <result column="class_course_id" property="classCourseId" jdbcType="INTEGER" />
    <result column="course_id" property="courseId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, student_id, evaluate_score, evaluate_text, class_course_id, course_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="cn.it.entity.EvaluateExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_evaluate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_evaluate
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectEvaluateToTeacher" resultType="cn.it.entity.vo.EvaluateVO" parameterType="cn.it.entity.model.EvaluatePO" >
	SELECT
		a.courseId,
		a.courseName,
		a.teacherName,
		te.evaluate_score evaluateScore,
		te.evaluate_text evaluateText
	FROM
		(
			SELECT DISTINCT
				(tcd.course_id) courseId,
				tc.course_name courseName,
				tt.teacher_name teacherName
			FROM
				t_course_detail tcd,
				t_course tc,
				t_teacher tt
			WHERE
				tcd.course_id = tc.id
			AND
				tcd.teacher_id = tt.id
			AND
				tcd.teacher_id = #{teacherId,jdbcType=INTEGER}
			<if test="courseId != null">
			AND
				tcd.course_id = #{courseId,jdbcType=INTEGER}
			</if>
		) a
	LEFT JOIN t_evaluate te ON te.course_id = a.courseId
  </select> 
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_evaluate
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.it.entity.EvaluateExample" >
    delete from t_evaluate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.it.entity.Evaluate" >
    insert into t_evaluate (id, student_id, evaluate_score, 
      evaluate_text, class_course_id, course_id)
    values (#{id,jdbcType=INTEGER}, #{studentId,jdbcType=INTEGER}, #{evaluateScore,jdbcType=INTEGER}, 
      #{evaluateText,jdbcType=VARCHAR}, #{classCourseId,jdbcType=INTEGER}, #{courseId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="cn.it.entity.Evaluate" >
    insert into t_evaluate
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="studentId != null" >
        student_id,
      </if>
      <if test="evaluateScore != null" >
        evaluate_score,
      </if>
      <if test="evaluateText != null" >
        evaluate_text,
      </if>
      <if test="classCourseId != null" >
        class_course_id,
      </if>
      <if test="courseId != null" >
       	course_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="studentId != null" >
        #{studentId,jdbcType=INTEGER},
      </if>
      <if test="evaluateScore != null" >
        #{evaluateScore,jdbcType=INTEGER},
      </if>
      <if test="evaluateText != null" >
        #{evaluateText,jdbcType=VARCHAR},
      </if>
      <if test="classCourseId != null" >
        #{classCourseId,jdbcType=INTEGER},
      </if>
      <if test="courseId != null" >
        #{courseId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.it.entity.EvaluateExample" resultType="java.lang.Integer" >
    select count(*) from t_evaluate
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_evaluate
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.studentId != null" >
        student_id = #{record.studentId,jdbcType=INTEGER},
      </if>
      <if test="record.evaluateScore != null" >
        evaluate_score = #{record.evaluateScore,jdbcType=INTEGER},
      </if>
      <if test="record.evaluateText != null" >
        evaluate_text = #{record.evaluateText,jdbcType=VARCHAR},
      </if>
      <if test="record.classCourseId != null" >
        class_course_id = #{record.classCourseId,jdbcType=INTEGER},
      </if>
      <if test="record.courseId != null" >
        course_id = #{record.courseId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_evaluate
    set id = #{record.id,jdbcType=INTEGER},
      student_id = #{record.studentId,jdbcType=INTEGER},
      evaluate_score = #{record.evaluateScore,jdbcType=INTEGER},
      evaluate_text = #{record.evaluateText,jdbcType=VARCHAR},
      class_course_id = #{record.classCourseId,jdbcType=INTEGER},
      course_id = #{record.courseId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.it.entity.Evaluate" >
    update t_evaluate
    <set >
      <if test="studentId != null" >
        student_id = #{studentId,jdbcType=INTEGER},
      </if>
      <if test="evaluateScore != null" >
        evaluate_score = #{evaluateScore,jdbcType=INTEGER},
      </if>
      <if test="evaluateText != null" >
        evaluate_text = #{evaluateText,jdbcType=VARCHAR},
      </if>
      <if test="classCourseId != null" >
        class_course_id = #{classCourseId,jdbcType=INTEGER},
      </if>
      <if test="courseId != null" >
        course_id = #{courseId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.it.entity.Evaluate" >
    update t_evaluate
    set student_id = #{studentId,jdbcType=INTEGER},
      evaluate_score = #{evaluateScore,jdbcType=INTEGER},
      evaluate_text = #{evaluateText,jdbcType=VARCHAR},
      class_course_id = #{classCourseId,jdbcType=INTEGER},
      course_id = #{courseId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>