<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.it.dao.TeacherMapper">
	<resultMap id="BaseResultMap" type="cn.it.entity.Teacher">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="teacher_name" property="teacherName" jdbcType="VARCHAR" />
		<result column="teache_no" property="teacheNo" jdbcType="VARCHAR" />
		<result column="gender" property="gender" jdbcType="INTEGER" />
		<result column="natives" property="natives" jdbcType="VARCHAR" />
		<result column="national" property="national" jdbcType="VARCHAR" />
		<result column="birthday" property="birthday" jdbcType="TIMESTAMP" />
		<result column="enter_date" property="enterDate" jdbcType="TIMESTAMP" />
		<result column="phone" property="phone" jdbcType="VARCHAR" />
		<result column="family_address" property="familyAddress"
			jdbcType="VARCHAR" />
		<result column="now_address" property="nowAddress" jdbcType="VARCHAR" />
		<result column="idCard" property="idcard" jdbcType="VARCHAR" />
		<result column="political" property="political" jdbcType="VARCHAR" />
		<result column="xueli_id" property="xueliId" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="belong" property="belong" jdbcType="INTEGER" />
	</resultMap>

	<resultMap id="BaseResultMapForList" type="cn.it.entity.Teacher"
		extends="BaseResultMap">
		<result column="total" property="total" jdbcType="INTEGER" />
	</resultMap>

	<sql id="Base_Column_List">
		id, user_id, teacher_name, teache_no, gender, natives, national,
		birthday, enter_date,
		phone, family_address, now_address, idCard, political,
		xueli_id,password,belong
	</sql>

	<sql id="Base_Column_List_For_List">
		id, user_id, teacher_name, teache_no, gender, natives, national,
		birthday, enter_date,
		phone, family_address, now_address, idCard, political,
		xueli_id,password,belong,total
	</sql>

	<select id="select" resultMap="BaseResultMap" parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from t_teacher
		where id = #{id,jdbcType=INTEGER}
	</select>

	<select id="selectTeacher" resultMap="BaseResultMap"
		parameterType="teacher">
		select
		<include refid="Base_Column_List" />
		from t_teacher
		where teache_no = #{teacheNo} and password = #{password}
	</select>

	<select id="selectTeacherByNo" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from t_teacher
		where teache_no = #{teacheNo}
	</select>
	
	<select id="selectTeacherByAcademyId" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from t_teacher tt
		where tt.belong = #{academyId}
	</select>

	<select id="selectListPage" resultMap="BaseResultMapForList"
		parameterType="teacher">
		select
		<include refid="Base_Column_List_For_List" />
		from ( 
		SELECT
			tt.*, (
				SELECT
					count(1)
				FROM
					t_teacher tt,
					t_academy ta
				<where>
					tt.belong = ta.id
					<if test="academyId != null">
						AND tt.belong = #{academyId,jdbcType=INTEGER}
					</if>
					<if test="key != null">
						AND (
							tt.teache_no LIKE CONCAT(CONCAT('%', #{key}), '%')
							OR tt.teacher_name LIKE CONCAT(CONCAT('%', #{key}), '%')
							OR ta.academy_name LIKE CONCAT(CONCAT('%', #{key}), '%')
						)
					</if>
				</where>
			) total
		FROM
			t_teacher tt,
			t_academy ta
		<where>
			tt.belong = ta.id
			<if test="academyId != null">
				AND tt.belong = #{academyId,jdbcType=INTEGER}
			</if>
			<if test="key != null">
				AND (
					tt.teache_no LIKE CONCAT(CONCAT('%', #{key}), '%')
					OR tt.teacher_name LIKE CONCAT(CONCAT('%', #{key}), '%')
					OR ta.academy_name LIKE CONCAT(CONCAT('%', #{key}), '%')
				)
			</if>
		</where>
		)t
		where 
			t.id limit #{pagedIndex,jdbcType=INTEGER},#{pagedSize,jdbcType=INTEGER};

	</select>

	<select id="selectList" resultMap="BaseResultMap" parameterType="teacher">
		select
		<include refid="Base_Column_List" />
		from t_teacher
	</select>

	<select id="selectListByAcademy" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		tt.id, tt.user_id, tt.teacher_name, tt.teache_no, tt.gender, tt.natives,
		tt.national, tt.birthday, tt.enter_date,
		tt.phone, tt.family_address, tt.now_address, tt.idCard, tt.political,
		tt.xueli_id,tt.password,tt.belong
		from t_teacher tt,t_academy ta,t_major tm
		where tt.belong = ta.id and ta.id = tm.academy_id and tm.id =
		#{tid,jdbcType=INTEGER}
	</select>

	<select id="selectCourseByTeacher" resultType="cn.it.entity.vo.EvaluateVO"
		parameterType="java.lang.Integer">
		SELECT
		distinct(tc.course_name) courseName , tc.id courseId
		FROM
		t_evaluate te,
		t_classes_course tcc,
		t_course tc
		WHERE
		te.class_course_id = tcc.id
		AND tcc.course_id = tc.id
		AND tcc.teacher_id = #{teacher_id,jdbcType=INTEGER};
	</select>

	<select id="selectEvaluateByCourse" resultType="cn.it.entity.vo.EvaluateVO"
		parameterType="java.lang.Integer">
		SELECT
		te.evaluate_text evaluateText,te.evaluate_score evaluateScore
		FROM
		t_evaluate te,
		t_classes_course tcc,
		t_course tc
		WHERE
		te.class_course_id = tcc.id
		AND tcc.course_id = tc.id
		AND tc.id = #{course_id,jdbcType=INTEGER};
	</select>

	<delete id="deleteList">
		delete from t_teacher where id in
		<foreach collection="array" close=")" open="(" item="id"
			separator=",">
			#{id}
		</foreach>
	</delete>

	<delete id="delete" parameterType="java.lang.Integer">
		delete from t_teacher
		where id = #{id,jdbcType=INTEGER}
	</delete>

	<insert id="insert" parameterType="cn.it.entity.Teacher">
		insert into t_teacher (id, user_id, teacher_name,
		teache_no, gender, natives,
		national, birthday, enter_date,
		phone, family_address, now_address,
		idCard, political, xueli_id,password,belong
		)
		values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER},
		#{teacherName,jdbcType=VARCHAR},
		#{teacheNo,jdbcType=VARCHAR}, #{gender,jdbcType=INTEGER}, #{natives,jdbcType=VARCHAR},
		#{national,jdbcType=VARCHAR}, #{birthday,jdbcType=TIMESTAMP},
		#{enterDate,jdbcType=TIMESTAMP},
		#{phone,jdbcType=VARCHAR}, #{familyAddress,jdbcType=VARCHAR}, #{nowAddress,jdbcType=VARCHAR},
		#{idcard,jdbcType=VARCHAR}, #{political,jdbcType=VARCHAR},
		#{xueliId,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}
		, #{belong,jdbcType=INTEGER}
		)
	</insert>

	<update id="update" parameterType="cn.it.entity.Teacher">
		update t_teacher
		set user_id = #{userId,jdbcType=INTEGER},
		teacher_name = #{teacherName,jdbcType=VARCHAR},
		teache_no = #{teacheNo,jdbcType=VARCHAR},
		gender = #{gender,jdbcType=INTEGER},
		natives = #{natives,jdbcType=VARCHAR},
		national = #{national,jdbcType=VARCHAR},
		birthday = #{birthday,jdbcType=TIMESTAMP},
		enter_date = #{enterDate,jdbcType=TIMESTAMP},
		phone = #{phone,jdbcType=VARCHAR},
		family_address = #{familyAddress,jdbcType=VARCHAR},
		now_address = #{nowAddress,jdbcType=VARCHAR},
		idCard = #{idcard,jdbcType=VARCHAR},
		political = #{political,jdbcType=VARCHAR},
		xueli_id = #{xueliId,jdbcType=VARCHAR},
		password = #{password,jdbcType=VARCHAR},
		belong = #{belong,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>

	<update id="updateExam" parameterType="cn.it.entity.Teacher">
		update t_teacher
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="teacherName != null">
				teacher_name = #{teacherName,jdbcType=VARCHAR},
			</if>
			<if test="teacheNo != null">
				teache_no = #{teacheNo,jdbcType=VARCHAR},
			</if>
			<if test="gender != null">
				gender = #{gender,jdbcType=INTEGER},
			</if>
			<if test="natives != null">
				natives = #{natives,jdbcType=VARCHAR},
			</if>
			<if test="national != null">
				national = #{national,jdbcType=VARCHAR},
			</if>
			<if test="birthday != null">
				birthday = #{birthday,jdbcType=TIMESTAMP},
			</if>
			<if test="enterDate != null">
				enter_date = #{enterDate,jdbcType=TIMESTAMP},
			</if>
			<if test="phone != null">
				phone = #{phone,jdbcType=VARCHAR},
			</if>
			<if test="familyAddress != null">
				family_address = #{familyAddress,jdbcType=VARCHAR},
			</if>
			<if test="nowAddress != null">
				now_address = #{nowAddress,jdbcType=VARCHAR},
			</if>
			<if test="idcard != null">
				idCard = #{idcard,jdbcType=VARCHAR},
			</if>
			<if test="political != null">
				political = #{political,jdbcType=VARCHAR},
			</if>
			<if test="xueliId != null">
				xueli_id = #{xueliId,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="belong != null">
				belong = #{belong,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
</mapper>